These notes will not stay here forever.  Someone should migrate them to the
project wiki.  But for now...


= contents of world directory =

$world/state/0 is the first state
$world/state/current is a symlink to the current state dir
$world/state/previous is a symlink to the previous state dir
Prior states can be deduced by subtracting one repeatedly.

$world/constraints/$name is a directory containing scripts implementing that
constraint:
    - add-to-world    - exit 0 if this contraint is happy joining a world
    - add-constraint  - exit 0 if this contraint approves another addition
    - add-generator   - same, but for generators
    - start-iteration - optionally perform world prep, validation, etc
        - An example usage would be implementation of a rule which says
          "assign pairs of players...".  This constraint would add variables
          to the new state representing these pairings.  The agents would
          "know" to look for their opponents by agreement with the rules they
          are playing under.
    - end-iteration   - validate a new state for finalization
        - A chance for a constraint to detect and note rules violations at the
          state level.

$world/generators/$name is a directory containing scripts implementating that
generator:
    - add-to-world    - same function as contraint version
        - The other hooks don't exist for generators.  They cannot object to
          the addition of new constraints or other generators.  Enforcing
          those kinds of relationships is the job of the constraints.
    - run
        - iteration hook

$world/states/$state_num/$keyname is a file containing a string value
$world/log/$next_state_num/$nn-$agent/$keyname is a file containing a new value
    $nn is assigned by the runner script and passed to the agent
    $agent the generator responsible for these changes

As long as there are no conflicts between the changes requested by each agent,
all of the values can be flattened into states/$state_num/$keyname.


