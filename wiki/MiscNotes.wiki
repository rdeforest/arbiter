
These notes will not stay here forever.  Someone should migrate them to the
project wiki.  But for now...

= contents of data directory =

  * defintions - library of definitions used in various worlds
  * dynamics - library of dynamics used in various worlds
  * worlds - the various worlds

= contents of world directories =

  * definitions
    * $id-$name -> ../../definitions/$def 
      * add-to-world    - exit 0 if this definition is happy joining a world
      * add-definition  - exit 0 if this definition approves a later addition
      * add-dynamic     - same, but for dynamics
      * start-iteration - optionally perform world prep, validation, etc
        * An example usage would be implementation of a rule which
          says "assign pairs of players...".  This definition would
          add variables to the new state representing these pairings.
          The agents would "know" to look for their opponents by
          agreement with the rules they are playing under.
      * end-iteration   - validate a new state for finalization
        * A chance for a definition to detect and note rules
          violations at the state level.
  * dynamics
    * $id-$name -> ../dynamics/$dyn 
      * add-to-world    - same function as definition version
        * The other hooks don't exist for dynamics.  They cannot object to
          the addition of new dynamics and definitions cannot be added after
          dynamics.  Enforcing dependencies is the job of the definitions.
      * query
        * iteration hook
  * state/
    * 0/ is global/constant state - set by definitions when ... ?
    * 1/ is the first dynamic state
    * current -> latest state dir
    * start -> 1 
    * $n/previous -> ../$[$n - 1] is a symlink to the predecessor to state $n
    * $n/next     -> ../$[$n + 1] is a symlink to the successor   to state $n
      * only exists once $n + 1 has started the setup phase
    * $n/$keyname is a file containing a string value

$world/log/$next_state_num/$nn-$agent/$keyname is a file containing a new value
    $nn is assigned by the runner script and passed to the agent
    $agent the dynamic responsible for these changes

As long as there are no conflicts between the changes requested by each agent,
all of the values can be flattened into states/$state_num/$keyname.

= interfaces of definition and dynamic scripts =

Scripts pull data from the state directory.  Scripts request changes
by emitting YAML describing those changes.  The YAML data must be a
flat hash of string:string pairs.  $value will be written to
$state/$source/$key.  For dynamic output, $source is the identifier of
the dynamic in question.  For definition output generated in state
setup the source is hard-coded to "pre".  For definition output at the
end of state processing the source is hard-coded to "post".

States are numbered in decimal starting from 0.

{{{$definition/add-*}}} are scripts which take a parameter naming the
entity to be added.  Their output, if any, is state information.

State 0 is a special case.
